const Cart = require('../models/Cart');
const Product = require('../models/Product');
const asyncHandler = require('../utils/asyncHandler');
const AppError = require('../utils/AppError');


// @desc    L·∫•y gi·ªè h√†ng c·ªßa user
// @route   GET /api/cart
// @access  Private
exports.getCart = asyncHandler(async (req, res) => {
  console.log("üõí getCart called for user:", req.user._id);
  let cart = await Cart.findOne({ user: req.user._id });
  console.log("üõí Found cart:", cart);
  
  if (!cart) {
    console.log("üõí Creating new cart for user");
    cart = await Cart.create({ 
      user: req.user._id, 
      items: [],
      totalItems: 0,
      totalAmount: 0
    });
  }

  // Populate sau khi ƒë√£ c√≥ cart
  if (cart.items && cart.items.length > 0) {
    console.log("üõí Populating cart items:", cart.items.length);
    await cart.populate('items.product', 'name price image images isAvailable');
    
    // Ki·ªÉm tra s·∫£n ph·∫©m c√≤n available kh√¥ng
    const updatedItems = cart.items.filter(item => {
      if (!item.product || !item.product.isAvailable) {
        return false;
      }
      return true;
    });

    if (updatedItems.length !== cart.items.length) {
      cart.items = updatedItems;
      await cart.save();
    }
  }

  console.log("üõí Returning cart with items:", cart.items.length);
  res.status(200).json({
    status: 'success',
    data: {
      cart
    }
  });
});

// @desc    Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
// @route   POST /api/cart/add
// @access  Private
exports.addToCart = asyncHandler(async (req, res, next) => {
  const { productId, quantity = 1 } = req.body;
  console.log("üõí addToCart called:", { productId, quantity, userId: req.user._id });

  // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i v√† available kh√¥ng
  const product = await Product.findById(productId);
  if (!product) {
    return next(new AppError('S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i', 404));
  }

  if (!product.isAvailable) {
    return next(new AppError('S·∫£n ph·∫©m hi·ªán t·∫°i kh√¥ng kh·∫£ d·ª•ng', 400));
  }

  console.log("üõí Product found:", product.name);

  // T√¨m ho·∫∑c t·∫°o cart
  let cart = await Cart.findOne({ user: req.user._id });
  console.log("üõí Existing cart:", cart);
  
  if (!cart) {
    console.log("üõí Creating new cart");
    cart = new Cart({ user: req.user._id, items: [] });
  }

  // ƒê·∫£m b·∫£o items lu√¥n l√† array
  if (!cart.items || !Array.isArray(cart.items)) {
    cart.items = [];
  }

  console.log("üõí Cart before adding item:", {
    itemsCount: cart.items.length,
    items: cart.items.map(item => ({ productId: item.product, quantity: item.quantity }))
  });

  // Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ c√≥ trong cart ch∆∞a
  const existingItemIndex = cart.items.findIndex(
    item => item.product.toString() === productId
  );

  if (existingItemIndex > -1) {
    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
    console.log("üõí Updating existing item quantity");
    cart.items[existingItemIndex].quantity += quantity;
  } else {
    // Th√™m s·∫£n ph·∫©m m·ªõi
    console.log("üõí Adding new item to cart");
    cart.items.push({
      product: productId,
      name: product.name,
      price: product.finalPrice, // S·ª≠ d·ª•ng gi√° sau discount
      quantity,
      image: product.image
    });
  }

  await cart.save();

  // Populate ƒë·ªÉ tr·∫£ v·ªÅ th√¥ng tin ƒë·∫ßy ƒë·ªß - ch·ªâ populate n·∫øu c√≥ items
  if (cart.items && cart.items.length > 0) {
    await cart.populate('items.product', 'name price image images isAvailable');
  }

  res.status(200).json({
    status: 'success',
    message: 'ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng',
    data: {
      cart
    }
  });
});

// @desc    C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
// @route   PUT /api/cart/update
// @access  Private
exports.updateCartItem = asyncHandler(async (req, res, next) => {
  const { productId, quantity } = req.body;

  if (quantity < 1) {
    return next(new AppError('S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0', 400));
  }

  const cart = await Cart.findOne({ user: req.user._id });
  if (!cart) {
    return next(new AppError('Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i', 404));
  }

  // ƒê·∫£m b·∫£o items lu√¥n l√† array
  if (!cart.items || !Array.isArray(cart.items)) {
    cart.items = [];
  }

  const itemIndex = cart.items.findIndex(
    item => item.product.toString() === productId
  );

  if (itemIndex === -1) {
    return next(new AppError('S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng', 404));
  }

  cart.items[itemIndex].quantity = quantity;
  await cart.save();

  // Populate ch·ªâ khi c√≥ items
  if (cart.items && cart.items.length > 0) {
    await cart.populate('items.product', 'name price image images isAvailable');
  }

  res.status(200).json({
    status: 'success',
    message: 'ƒê√£ c·∫≠p nh·∫≠t gi·ªè h√†ng',
    data: {
      cart
    }
  });
});

// @desc    X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
// @route   DELETE /api/cart/remove/:productId
// @access  Private
exports.removeFromCart = asyncHandler(async (req, res, next) => {
  const { productId } = req.params;

  const cart = await Cart.findOne({ user: req.user._id });
  if (!cart) {
    return next(new AppError('Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i', 404));
  }

  // ƒê·∫£m b·∫£o items lu√¥n l√† array
  if (!cart.items || !Array.isArray(cart.items)) {
    cart.items = [];
  }

  cart.items = cart.items.filter(
    item => item.product.toString() !== productId
  );

  await cart.save();
  
  // Populate ch·ªâ khi c√≤n items
  if (cart.items && cart.items.length > 0) {
    await cart.populate('items.product', 'name price image images isAvailable');
  }

  res.status(200).json({
    status: 'success',
    message: 'ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng',
    data: {
      cart
    }
  });
});

// @desc    X√≥a to√†n b·ªô gi·ªè h√†ng
// @route   DELETE /api/cart/clear
// @access  Private
exports.clearCart = asyncHandler(async (req, res, next) => {
  const cart = await Cart.findOne({ user: req.user._id });
  if (!cart) {
    return next(new AppError('Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i', 404));
  }

  cart.items = [];
  await cart.save();

  res.status(200).json({
    status: 'success',
    message: 'ƒê√£ x√≥a to√†n b·ªô gi·ªè h√†ng',
    data: {
      cart
    }
  });
});